import logging
import os
from html import escape

import httpx
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackContext,
    CommandHandler,
    MessageHandler,
    filters,
)

dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN", "")
API_BASE_URL = os.getenv("API_BASE_URL", "")


# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [["–ú–∞—Ä—à—Ä—É—Ç—ã", "–ö–æ–ª–ª–µ–∫—Ü–∏–∏"], ["–¢–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞"]], resize_keyboard=True
    )


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    if update.message:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π.",
            reply_markup=main_keyboard(),
        )


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
async def show_routes(update: Update, context: CallbackContext):
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{API_BASE_URL}/routers/")
            response.raise_for_status()
            routers = response.json()

            if not routers:
                await update.message.reply_text(
                    "üöß –ü–æ–∫–∞ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞—Ä—à—Ä—É—Ç!"
                )
                return

            for router in routers:
                name = escape(router.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                description = escape(router.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"))
                start_date = escape(router.get("start_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"))
                end_date = escape(router.get("end_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"))
                author = escape(
                    router.get("author", {}).get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä")
                )
                photo = router.get("photo")

                points = router.get("points", [])
                if isinstance(points, list):
                    points_text = (
                        "\n".join(
                            f"üìç {escape(p.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))} ({p.get('latitude')}, {p.get('longitude')})"
                            for p in points
                        )
                        or "–ù–µ—Ç —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞."
                    )
                else:
                    points_text = "–ù–µ—Ç —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞."

                msg = (
                    f"üó∫ <b>{name}</b>\n"
                    f"üë§ –ê–≤—Ç–æ—Ä: {author}\n"
                    f"üìÖ –ù–∞—á–∞–ª–æ: {start_date}\n"
                    f"‚è≥ –ö–æ–Ω–µ—Ü: {end_date}\n"
                    f"üìù {description}\n\n"
                    f"{points_text}"
                )

                # if photo:
                #     # await update.message.reply_photo(photo, caption=msg, parse_mode="HTML")
                #     pass
                # else:
                await update.message.reply_text(msg, parse_mode="HTML")

        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤.")


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π
async def show_collections(update: Update, context: CallbackContext):
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{API_BASE_URL}/collections/")
            response.raise_for_status()
            collections = response.json()

            if not collections:
                await update.message.reply_text(
                    "üì≠ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤!"
                )
                return

            for collection in collections:
                name = escape(collection.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                description = escape(collection.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"))
                is_public = "–î–∞" if collection.get("is_public") else "–ù–µ—Ç"
                routers = collection.get("routers", [])

                router_text = (
                    "\n".join(
                        f"üó∫ <b>{escape(r.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))}</b>\nüìù {escape(r.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'))}"
                        for r in routers
                    )
                    or "–ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
                )

                msg = (
                    f"üìö <b>{name}</b>\n"
                    f"üñã <i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {description}\n"
                    f"üåç –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {is_public}\n\n"
                    f"{router_text}"
                )

                await update.message.reply_text(msg, parse_mode="HTML")

        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π.")


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–∑–∞–≥–ª—É—à–∫–∞)
# –ü–æ–∫–∞–∑ —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞
async def show_points(update: Update, context: CallbackContext):
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{API_BASE_URL}/points/")
            response.raise_for_status()
            points = response.json()

            if not points:
                await update.message.reply_text("–ù–µ—Ç —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞.")
                return

            for point in points:
                name = escape(point.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                description = escape(point.get("description", ""))
                latitude = point.get("latitude", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                longitude = point.get("longitude", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                category = escape(point.get("category", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"))
                photo = point.get("photo")

                msg = (
                    f"üìç <b>{name}</b>\n"
                    f"üìù {description}\n"
                    f"üìå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}\n"
                    f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
                )

                # if photo:
                #     # await update.message.reply_photo(photo, caption=msg, parse_mode="HTML")
                #     pass
                # else:
                await update.message.reply_text(msg, parse_mode="HTML")

        except httpx.RequestError as exc:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—á–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–∞."
            )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text.lower()

    if text == "–º–∞—Ä—à—Ä—É—Ç—ã":
        await show_routes(update, context)
    elif text == "–∫–æ–ª–ª–µ–∫—Ü–∏–∏":
        await show_collections(update, context)
    elif text == "—Ç–æ—á–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞":
        await show_points(update, context)
    else:
        await update.message.reply_text(
            "–ù–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π."
        )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("routes", show_routes))
    application.add_handler(CommandHandler("collections", show_collections))
    application.add_handler(CommandHandler("points", show_points))

    # –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞
    application.run_polling()


if __name__ == "__main__":
    main()
